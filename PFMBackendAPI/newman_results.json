{
  "collection": {
    "_": {
      "postman_id": "1a24bff7-0299-48f9-a76c-d834c12fad82",
      "exporter_id": "13341761"
    },
    "item": [
      {
        "id": "a3c26b70-9f0f-4807-9307-4958164ed143",
        "name": "Transactions",
        "item": [
          {
            "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
            "name": "Categorize Transaction",
            "item": [
              {
                "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
                "name": "Categorize Transaction 200",
                "request": {
                  "url": {
                    "path": [
                      "10023191",
                      "categorize"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"catcode\": \"4\"\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                    }
                  }
                ]
              },
              {
                "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
                "name": "Categorize Transaction 404",
                "request": {
                  "url": {
                    "path": [
                      "10023191",
                      "categorize"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"catcode\": \"4555\"\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
            "name": "Get Transactions",
            "item": [
              {
                "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
                "name": "Get Transactions 200",
                "request": {
                  "url": {
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [
                      {
                        "key": "transactionKind",
                        "value": "wdw,pmt"
                      },
                      {
                        "disabled": true,
                        "key": "startDate",
                        "value": "2021-11-20"
                      },
                      {
                        "disabled": true,
                        "key": "endDate",
                        "value": "2021-11-21"
                      },
                      {
                        "key": "sortBy",
                        "value": "transactionId"
                      },
                      {
                        "key": "sortOrder",
                        "value": "asc"
                      },
                      {
                        "key": "page",
                        "value": "1"
                      },
                      {
                        "key": "pageSize",
                        "value": "10"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {
                    "mode": "formdata",
                    "formdata": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"totalCount\": { \"type\": \"number\" },",
                        "        \"pageSize\": { \"type\": \"number\" },",
                        "        \"page\": { \"type\": \"number\" },",
                        "        \"totalPages\": { \"type\": \"number\" },",
                        "        \"sortOrder\": { \"type\": \"number\" },",
                        "        \"sortBy\": { \"type\": \"string\" },",
                        "        \"items\": {",
                        "            \"type\": \"array\",",
                        "            \"items\": {",
                        "                \"type\": \"object\",",
                        "                \"properties\": {",
                        "                    \"transactionId\": { \"type\": \"number\" },",
                        "                    \"beneficiaryName\": { \"type\": \"string\" },",
                        "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                        "                    \"direction\": { \"type\": \"string\" },",
                        "                    \"amount\": { \"type\": \"number\" },",
                        "                    \"description\": { \"type\": \"string\" },",
                        "                    \"currency\": { \"type\": \"number\" },",
                        "                    \"mcc\": { \"type\": \"number\" },",
                        "                    \"kind\": { \"type\": \"string\" },",
                        "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                        "                    \"splits\": {",
                        "                        \"type\": \"array\",",
                        "                        \"items\": {",
                        "                            \"type\": \"object\",",
                        "                            \"properties\": {",
                        "                                \"splitId\": { \"type\": \"number\" },",
                        "                                \"description\": { \"type\": \"string\" },",
                        "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                        "                                \"amount\": { \"type\": \"number\" },",
                        "                                \"transactionId\": { \"type\": \"number\" }",
                        "                            },",
                        "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                        "                        }",
                        "                    }",
                        "                },",
                        "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                        "            }",
                        "        }",
                        "    },",
                        "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
                "name": "Get Transactions 400",
                "request": {
                  "url": {
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [
                      {
                        "key": "transactionKind",
                        "value": "wdw,pmt"
                      },
                      {
                        "key": "startDate",
                        "value": "2022-11-20"
                      },
                      {
                        "key": "endDate",
                        "value": "2021-11-21"
                      },
                      {
                        "key": "sortBy",
                        "value": "transactionId"
                      },
                      {
                        "key": "sortOrder",
                        "value": "asc"
                      },
                      {
                        "key": "page",
                        "value": "1"
                      },
                      {
                        "key": "pageSize",
                        "value": "10"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {
                    "mode": "formdata",
                    "formdata": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
            "name": "Split Transaction",
            "item": [
              {
                "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
                "name": "Split Transaction 200",
                "request": {
                  "url": {
                    "path": [
                      "10058284",
                      "split"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                    }
                  }
                ]
              },
              {
                "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
                "name": "Split Transaction 400",
                "request": {
                  "url": {
                    "path": [
                      "10058284",
                      "split"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"statusCode\": { \"type\": \"string\"},",
                        "        \"message\": { \"type\": \"string\"},",
                        "        \"errors\": {",
                        "            \"type\": \"array\",",
                        "            \"items\": {",
                        "                \"type\": \"object\",",
                        "                \"properties\": {",
                        "                    \"tag\": { \"type\": \"string\" },",
                        "                    \"error\": { \"type\": \"string\" },",
                        "                    \"message\": { \"type\": \"string\" }",
                        "                },",
                        "                \"required\": [\"tag\", \"error\", \"message\"]",
                        "            }",
                        "        }",
                        "    },",
                        "    \"required\": [\"statusCode\", \"errors\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                    }
                  }
                ]
              },
              {
                "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
                "name": "Split Transaction 404",
                "request": {
                  "url": {
                    "path": [
                      "10058285",
                      "split"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"statusCode\": { \"type\": \"string\"},",
                        "        \"message\": { \"type\": \"string\"},",
                        "        \"errors\": {",
                        "            \"type\": \"array\",",
                        "            \"items\": {",
                        "                \"type\": \"object\",",
                        "                \"properties\": {",
                        "                    \"tag\": { \"type\": \"string\" },",
                        "                    \"error\": { \"type\": \"string\" },",
                        "                    \"message\": { \"type\": \"string\" }",
                        "                },",
                        "                \"required\": [\"tag\", \"error\", \"message\"]",
                        "            }",
                        "        }",
                        "    },",
                        "    \"required\": [\"statusCode\", \"errors\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "f3f0da63-2e40-46be-ad87-13803894edad",
            "name": "Auto-Categorize Transactions",
            "item": [
              {
                "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
                "name": "Auto-Categorize Transaction 200",
                "request": {
                  "url": {
                    "path": [
                      "auto-categorize"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
            "name": "Import File",
            "item": [
              {
                "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
                "name": "Import File 200",
                "request": {
                  "url": {
                    "path": [
                      "import"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "formFile",
                        "type": "file",
                        "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                        "});"
                      ],
                      "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                    }
                  }
                ]
              },
              {
                "id": "ab2359f4-e431-444a-9240-fa0370050819",
                "name": "Import File 400",
                "request": {
                  "url": {
                    "path": [
                      "import"
                    ],
                    "host": [
                      "{{server}}{{transactionsUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "disabled": true,
                        "key": "formFile",
                        "type": "file",
                        "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"statusCode\": { \"type\": \"number\" },",
                        "        \"message\": { \"type\": \"string\" },",
                        "        \"errors\": {",
                        "            \"type\": \"object\",",
                        "            \"properties\": {",
                        "                \"formFile\": {",
                        "                    \"type\": \"array\",",
                        "                    \"items\": {",
                        "                        \"type\": \"string\"",
                        "                    }",
                        "                }",
                        "            },",
                        "            \"required\": [\"formFile\"]",
                        "        }",
                        "    },",
                        "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                        "});"
                      ],
                      "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "15f6bd48-33fe-4bf7-8107-d917afcd885a",
        "name": "Categories",
        "item": [
          {
            "id": "3afccb31-c0c2-4224-abbb-2e1cbb93d6ab",
            "name": "Get Categories",
            "item": [
              {
                "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
                "name": "Get Categories 200",
                "request": {
                  "url": {
                    "host": [
                      "{{server}}{{categoriesUri}}"
                    ],
                    "query": [
                      {
                        "key": "parentCode",
                        "value": "B"
                      },
                      {
                        "key": "sortBy",
                        "value": "parentCode"
                      },
                      {
                        "key": "sortOrder",
                        "value": "desc"
                      },
                      {
                        "key": "page",
                        "value": "1"
                      },
                      {
                        "key": "pageSize",
                        "value": "10"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {
                    "mode": "formdata",
                    "formdata": []
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"totalCount\": { \"type\": \"number\" },",
                        "        \"pageSize\": { \"type\": \"number\" },",
                        "        \"page\": { \"type\": \"number\" },",
                        "        \"totalPages\": { \"type\": \"number\" },",
                        "        \"sortOrder\": { \"type\": \"number\" },",
                        "        \"sortBy\": { \"type\": \"string\" },",
                        "        \"items\": {",
                        "            \"type\": \"array\",",
                        "            \"items\": {",
                        "                \"type\": \"object\",",
                        "                \"properties\": {",
                        "                    \"codeId\": { \"type\": \"string\" },",
                        "                    \"parentCode\": { \"type\": \"string\" },",
                        "                    \"name\": { \"type\": \"string\" }",
                        "                },",
                        "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                        "            }",
                        "        }",
                        "    },",
                        "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
            "name": "Import File",
            "item": [
              {
                "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
                "name": "Import File 200",
                "request": {
                  "url": {
                    "path": [
                      "import"
                    ],
                    "host": [
                      "{{server}}{{categoriesUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "formFile",
                        "type": "file",
                        "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                        "});"
                      ],
                      "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                    }
                  }
                ]
              },
              {
                "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
                "name": "Import File 400",
                "request": {
                  "url": {
                    "path": [
                      "import"
                    ],
                    "host": [
                      "{{server}}{{categoriesUri}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "disabled": true,
                      "key": "",
                      "value": ""
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "disabled": true,
                        "key": "formFile",
                        "type": "file",
                        "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 400\", function () {",
                        "    pm.response.to.have.status(400);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"statusCode\": { \"type\": \"number\" },",
                        "        \"message\": { \"type\": \"string\" },",
                        "        \"errors\": {",
                        "            \"type\": \"object\",",
                        "            \"properties\": {",
                        "                \"formFile\": {",
                        "                    \"type\": \"array\",",
                        "                    \"items\": {",
                        "                        \"type\": \"string\"",
                        "                    }",
                        "                }",
                        "            },",
                        "            \"required\": [\"formFile\"]",
                        "        }",
                        "    },",
                        "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                        "});"
                      ],
                      "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "039351fd-d5b7-44ee-b60b-1ce45c582caa",
        "name": "Spending Analytics",
        "item": [
          {
            "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
            "name": "Get Spending Analytics",
            "item": [
              {
                "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
                "name": "Get Spending Analytics 200",
                "request": {
                  "url": {
                    "host": [
                      "{{server}}{{spendingAnalyticsUri}}"
                    ],
                    "query": [
                      {
                        "key": "catcode",
                        "value": "C,4"
                      },
                      {
                        "disabled": true,
                        "key": "startDate",
                        "value": "2021-11-20"
                      },
                      {
                        "disabled": true,
                        "key": "endDate",
                        "value": "2021-11-21"
                      },
                      {
                        "disabled": true,
                        "key": "direction",
                        "value": "d"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "disabled": true,
                        "key": "formFile",
                        "type": "file",
                        "src": []
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 200\", function () {",
                        "    pm.response.to.have.status(200);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"groups\": {",
                        "            \"type\": \"array\",",
                        "            \"items\": {",
                        "                \"type\": \"object\",",
                        "                \"properties\": {",
                        "                    \"catcode\": { \"type\": \"string\" },",
                        "                    \"amount\": { \"type\": \"number\" },",
                        "                    \"count\": { \"type\": \"number\" }",
                        "                },",
                        "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                        "            }",
                        "        }",
                        "    },",
                        "    \"required\": [\"groups\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
                "name": "Get Spending Analytics 404",
                "request": {
                  "url": {
                    "host": [
                      "{{server}}{{spendingAnalyticsUri}}"
                    ],
                    "query": [
                      {
                        "key": "catcode",
                        "value": "A"
                      },
                      {
                        "disabled": true,
                        "key": "startDate",
                        "value": "2021-11-20"
                      },
                      {
                        "disabled": true,
                        "key": "endDate",
                        "value": "2021-11-21"
                      },
                      {
                        "disabled": true,
                        "key": "direction",
                        "value": "d"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "disabled": true,
                        "key": "formFile",
                        "type": "file",
                        "src": []
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"Status code is 404\", function () {",
                        "    pm.response.to.have.status(404);",
                        "});",
                        "",
                        "const expectedSchema = {",
                        "    \"type\": \"object\",",
                        "    \"properties\": {",
                        "        \"message\": { \"type\": \"string\" }",
                        "    },",
                        "    \"required\": [\"message\"]",
                        "};",
                        "",
                        "pm.test(\"Response has correct schema\", function () {",
                        "    const jsonData = pm.response.json();",
                        "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                        "});",
                        "",
                        "pm.test(\"Response time is less than 500ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);",
                        "});"
                      ],
                      "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "1a24bff7-0299-48f9-a76c-d834c12fad82",
      "name": "TestPFMBackendAPI",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2023-07-24T19:15:25.763Z",
      "postman_exported_using": "Postman/10.16.3"
    },
    "id": "62e1957d-4f10-4119-af62-bec770235f32",
    "name": "PFMBackendAPIEnvironment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:5145",
        "key": "server"
      },
      {
        "type": "any",
        "value": "/v1/transactions",
        "key": "transactionsUri"
      },
      {
        "type": "any",
        "value": "/v1/categories",
        "key": "categoriesUri"
      },
      {
        "type": "any",
        "value": "/v1/spending-analytics",
        "key": "spendingAnalyticsUri"
      },
      {
        "type": "any",
        "value": "",
        "key": "testInputExistingValue"
      },
      {
        "type": "any",
        "value": "",
        "key": "testInputNonExistingValue"
      },
      {
        "type": "any",
        "value": "",
        "key": "resourceName"
      }
    ]
  },
  "globals": {
    "id": "13524505-cbc7-4a72-aa81-ab2dfec17218",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 15
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 45,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690227516328,
      "completed": 1690227516542
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da118703-58b5-45ab-9ccb-c41a74effd68",
          "httpRequestId": "542ba8d7-315d-4f31-965a-b8c65f7b1d1e"
        },
        "item": {
          "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
          "name": "Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "10023191",
              "categorize"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed337ec2-f57d-42f0-8136-635a828fd5a7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"catcode\": \"4\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "783e0dde-76f4-4280-91bd-4054ada10934",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0531eb2d-ea12-48a8-b2bb-8a354b167d57"
        },
        "item": {
          "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
          "name": "Categorize Transaction 404",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4555\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "10023191",
              "categorize"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "087c5831-7a77-4621-9be4-5553474529fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"catcode\": \"4555\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5a75632f-5e4f-4178-9f37-c4f1cd01bcfe",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a0213340-c78b-4c5a-9d99-7036f8613d6b"
        },
        "item": {
          "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
          "name": "Get Transactions 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"transactionId\": { \"type\": \"number\" },",
                  "                    \"beneficiaryName\": { \"type\": \"string\" },",
                  "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                  "                    \"direction\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"description\": { \"type\": \"string\" },",
                  "                    \"currency\": { \"type\": \"number\" },",
                  "                    \"mcc\": { \"type\": \"number\" },",
                  "                    \"kind\": { \"type\": \"string\" },",
                  "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                    \"splits\": {",
                  "                        \"type\": \"array\",",
                  "                        \"items\": {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"splitId\": { \"type\": \"number\" },",
                  "                                \"description\": { \"type\": \"string\" },",
                  "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                                \"amount\": { \"type\": \"number\" },",
                  "                                \"transactionId\": { \"type\": \"number\" }",
                  "                            },",
                  "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                  "                        }",
                  "                    }",
                  "                },",
                  "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "transactionKind",
                "value": "wdw,pmt"
              },
              {
                "key": "sortBy",
                "value": "transactionId"
              },
              {
                "key": "sortOrder",
                "value": "asc"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "pageSize",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe5a274b-e6c7-4a01-a0f3-4006133c9fc1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": []
          }
        },
        "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "32a0cb47-b762-4fae-b6c5-947551e08239",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "204b2838-7e66-41ad-b69b-fdd79ee35911"
        },
        "item": {
          "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
          "name": "Get Transactions 400",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "key": "startDate",
                  "value": "2022-11-20"
                },
                {
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "transactionKind",
                "value": "wdw,pmt"
              },
              {
                "key": "startDate",
                "value": "2022-11-20"
              },
              {
                "key": "endDate",
                "value": "2021-11-21"
              },
              {
                "key": "sortBy",
                "value": "transactionId"
              },
              {
                "key": "sortOrder",
                "value": "asc"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "pageSize",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "422128e5-191f-4a35-8112-f699271bee2d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": []
          }
        },
        "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "98bcf16e-f3fa-4b39-871b-ef0ab7e7cb24",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "388fcae5-26b7-487d-874d-cb50468bab5f"
        },
        "item": {
          "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
          "name": "Split Transaction 200",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "10058284",
              "split"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c5216b43-ac4b-4f12-b905-9db8908c21b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a13c6c37-aab6-4d80-9505-d2668a9b6934",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd213ce9-6df5-4463-97ee-a803ab400ba2"
        },
        "item": {
          "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
          "name": "Split Transaction 400",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "10058284",
              "split"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f11e2d17-0079-407c-bda2-a97906e42393",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "72fe8739-eb5f-4ca9-acaa-2606b580ed96",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "074b6e04-bf39-4c06-ad8a-251fc0ef915f"
        },
        "item": {
          "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
          "name": "Split Transaction 404",
          "request": {
            "url": {
              "path": [
                "10058285",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "10058285",
              "split"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0eba40f1-61f4-4f2b-b776-bcd1ae4d1d5e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "71fb6de6-fc2c-4369-89e5-2f433f73693e",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53105633-7231-4bd1-9a8b-d0f0193d1194"
        },
        "item": {
          "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
          "name": "Auto-Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "auto-categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "auto-categorize"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6fc447b0-4bdf-454d-a019-0b265cbb236e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST"
        },
        "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cfc3a2bf-804a-4500-916d-404788a3a868",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e68f1949-c532-41ce-a147-97cd1b4a5363"
        },
        "item": {
          "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "import"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47faff7b-5a2d-4311-9431-68c8f6036c19",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "formFile",
                "type": "file",
                "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
              }
            ]
          }
        },
        "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d2611dbd-aac3-4eb8-8e1a-5eb39f0d5eb8",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "004f8f1f-8082-428a-8fda-82bda4474432"
        },
        "item": {
          "id": "ab2359f4-e431-444a-9240-fa0370050819",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "transactions",
              "import"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "63740fc1-c36c-4ad2-aa22-28183d95c8a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "disabled": true,
                "key": "formFile",
                "type": "file",
                "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
              }
            ]
          }
        },
        "id": "ab2359f4-e431-444a-9240-fa0370050819",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "03dd078c-dd94-463b-a4d4-454c8545dd1a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e8efbf-46f8-4298-8e7f-ea674da02847"
        },
        "item": {
          "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
          "name": "Get Categories 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [
                {
                  "key": "parentCode",
                  "value": "B"
                },
                {
                  "key": "sortBy",
                  "value": "parentCode"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"codeId\": { \"type\": \"string\" },",
                  "                    \"parentCode\": { \"type\": \"string\" },",
                  "                    \"name\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "categories"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "parentCode",
                "value": "B"
              },
              {
                "key": "sortBy",
                "value": "parentCode"
              },
              {
                "key": "sortOrder",
                "value": "desc"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "pageSize",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd148053-c6d2-4124-a232-bcf907932cf1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": []
          }
        },
        "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad7fbf50-4a03-4973-81cd-d7e302102aeb",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c673e4f4-2aa8-4aff-8838-4604ce973a4d"
        },
        "item": {
          "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "categories",
              "import"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d266e225-75e9-47d3-acd5-44aeb9d764ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "formFile",
                "type": "file",
                "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
              }
            ]
          }
        },
        "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8bd3221-439f-4b01-a43e-b54cfd0eb97b",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeafa191-7934-4c55-a564-6972d3010210"
        },
        "item": {
          "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "categories",
              "import"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": true,
              "key": "",
              "value": ""
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1654a10b-899b-4cc1-8c4b-d63adcbabb5e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "disabled": true,
                "key": "formFile",
                "type": "file",
                "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
              }
            ]
          }
        },
        "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 400",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d4b2748-4e95-437a-91d7-54aac3c70403",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3952af23-82a2-46b3-aa9c-1c8c619438ea"
        },
        "item": {
          "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
          "name": "Get Spending Analytics 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "C,4"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"groups\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"catcode\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"count\": { \"type\": \"number\" }",
                  "                },",
                  "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"groups\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "spending-analytics"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "catcode",
                "value": "C,4"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ce6636e-08a2-40f5-81fd-bf4702704d55",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "disabled": true,
                "key": "formFile",
                "type": "file",
                "src": []
              }
            ]
          }
        },
        "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:14)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "113ba4e0-6460-418b-92c6-b1f76cd3331f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "093f9af6-51e2-4336-89fc-e5c8c93c8457"
        },
        "item": {
          "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
          "name": "Get Spending Analytics 404",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "A"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5145",
            "path": [
              "v1",
              "spending-analytics"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "catcode",
                "value": "A"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "902869a6-c5e9-403b-aad0-f80955d7ceb6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5145",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "disabled": true,
                "key": "formFile",
                "type": "file",
                "src": []
              }
            ]
          }
        },
        "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
        "requestError": {
          "code": "ERR_INVALID_IP_ADDRESS"
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response has correct schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response has correct schema",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:15)"
            }
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response time is less than 500ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:15)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "fe5b43bd-bff4-4ddc-a4db-2294b9a4821e",
          "timestamp": 1690227516355,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
          "name": "Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da118703-58b5-45ab-9ccb-c41a74effd68",
          "httpRequestId": "542ba8d7-315d-4f31-965a-b8c65f7b1d1e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "b149b18033a9c325e37d8773a6bd75c3",
          "id": "6e59f047-db11-4fab-a81c-d789799a5654",
          "timestamp": 1690227516367,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
          "name": "Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da118703-58b5-45ab-9ccb-c41a74effd68",
          "httpRequestId": "542ba8d7-315d-4f31-965a-b8c65f7b1d1e",
          "scriptId": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
          "execution": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "a27fad6d29b1c77d938d95bdd1ea5b16",
          "id": "76c1cc9a-ad1b-4bc2-9955-9df987b24f71",
          "timestamp": 1690227516368,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
          "name": "Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da118703-58b5-45ab-9ccb-c41a74effd68",
          "httpRequestId": "542ba8d7-315d-4f31-965a-b8c65f7b1d1e",
          "scriptId": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
          "execution": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "db51ed2f032a5488ab694e9f5237effb",
          "id": "bbc3252f-3d73-4022-9f31-a4da17999471",
          "timestamp": 1690227516368,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
          "name": "Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "da118703-58b5-45ab-9ccb-c41a74effd68",
          "httpRequestId": "542ba8d7-315d-4f31-965a-b8c65f7b1d1e",
          "scriptId": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
          "execution": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "5e52d1ec-63a3-4e07-82b4-feda0a48d16b",
          "timestamp": 1690227516378,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
          "name": "Categorize Transaction 404",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4555\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "783e0dde-76f4-4280-91bd-4054ada10934",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0531eb2d-ea12-48a8-b2bb-8a354b167d57"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "65cc6038ea9a6f5106a88fc84e2b3357",
          "id": "12c76806-2085-4844-b6bf-1e6001a594cc",
          "timestamp": 1690227516382,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
          "name": "Categorize Transaction 404",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4555\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "783e0dde-76f4-4280-91bd-4054ada10934",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0531eb2d-ea12-48a8-b2bb-8a354b167d57",
          "scriptId": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
          "execution": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4565b1164aeed7fa4b293c5be77cde9c",
          "id": "439abb26-0fd0-409f-ac55-90163f55339d",
          "timestamp": 1690227516382,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
          "name": "Categorize Transaction 404",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4555\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "783e0dde-76f4-4280-91bd-4054ada10934",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0531eb2d-ea12-48a8-b2bb-8a354b167d57",
          "scriptId": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
          "execution": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "43fd46d54be0b972d41424038de283c1",
          "id": "43b3be94-67c8-4fe0-aaf8-cfca589224f4",
          "timestamp": 1690227516383,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
          "name": "Categorize Transaction 404",
          "request": {
            "url": {
              "path": [
                "10023191",
                "categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"catcode\": \"4555\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
              }
            }
          ]
        },
        "parent": {
          "id": "612dc3ee-03a7-4577-acf3-c3a2d0b84cdd",
          "name": "Categorize Transaction",
          "item": [
            {
              "id": "117c81db-847e-4b06-92e0-8b32af0f0595",
              "name": "Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40371d18-7b10-477e-94ff-bd4fc9644ad2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "3da98fc6-ad55-499f-937a-5d5e0346b38d"
                  }
                }
              ]
            },
            {
              "id": "9fe4b2eb-73fd-4fac-9f9f-5c770356aed0",
              "name": "Categorize Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10023191",
                    "categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"catcode\": \"4555\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "783e0dde-76f4-4280-91bd-4054ada10934",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0531eb2d-ea12-48a8-b2bb-8a354b167d57",
          "scriptId": "713cf66a-b551-45ba-855e-c1ef5fe6dd31",
          "execution": "ac340231-5bb1-475b-a2d0-e7c3e2c34f30"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "8a5e598c-d1a2-460c-9de5-00691fa77dc2",
          "timestamp": 1690227516391,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
          "name": "Get Transactions 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"transactionId\": { \"type\": \"number\" },",
                  "                    \"beneficiaryName\": { \"type\": \"string\" },",
                  "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                  "                    \"direction\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"description\": { \"type\": \"string\" },",
                  "                    \"currency\": { \"type\": \"number\" },",
                  "                    \"mcc\": { \"type\": \"number\" },",
                  "                    \"kind\": { \"type\": \"string\" },",
                  "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                    \"splits\": {",
                  "                        \"type\": \"array\",",
                  "                        \"items\": {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"splitId\": { \"type\": \"number\" },",
                  "                                \"description\": { \"type\": \"string\" },",
                  "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                                \"amount\": { \"type\": \"number\" },",
                  "                                \"transactionId\": { \"type\": \"number\" }",
                  "                            },",
                  "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                  "                        }",
                  "                    }",
                  "                },",
                  "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5a75632f-5e4f-4178-9f37-c4f1cd01bcfe",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a0213340-c78b-4c5a-9d99-7036f8613d6b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "bd291fd6636fa58b6be1d6a9c5c383ff",
          "id": "0f49fe23-012f-450b-8482-6f3fc7bef8ac",
          "timestamp": 1690227516394,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
          "name": "Get Transactions 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"transactionId\": { \"type\": \"number\" },",
                  "                    \"beneficiaryName\": { \"type\": \"string\" },",
                  "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                  "                    \"direction\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"description\": { \"type\": \"string\" },",
                  "                    \"currency\": { \"type\": \"number\" },",
                  "                    \"mcc\": { \"type\": \"number\" },",
                  "                    \"kind\": { \"type\": \"string\" },",
                  "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                    \"splits\": {",
                  "                        \"type\": \"array\",",
                  "                        \"items\": {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"splitId\": { \"type\": \"number\" },",
                  "                                \"description\": { \"type\": \"string\" },",
                  "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                                \"amount\": { \"type\": \"number\" },",
                  "                                \"transactionId\": { \"type\": \"number\" }",
                  "                            },",
                  "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                  "                        }",
                  "                    }",
                  "                },",
                  "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5a75632f-5e4f-4178-9f37-c4f1cd01bcfe",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a0213340-c78b-4c5a-9d99-7036f8613d6b",
          "scriptId": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
          "execution": "68eff305-a44e-4334-8558-dfa726e536d0"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "32849450a4d9577f4c7e8246aef0a5ac",
          "id": "ae1b6811-2d16-4d49-a181-879bf074a055",
          "timestamp": 1690227516394,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
          "name": "Get Transactions 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"transactionId\": { \"type\": \"number\" },",
                  "                    \"beneficiaryName\": { \"type\": \"string\" },",
                  "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                  "                    \"direction\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"description\": { \"type\": \"string\" },",
                  "                    \"currency\": { \"type\": \"number\" },",
                  "                    \"mcc\": { \"type\": \"number\" },",
                  "                    \"kind\": { \"type\": \"string\" },",
                  "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                    \"splits\": {",
                  "                        \"type\": \"array\",",
                  "                        \"items\": {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"splitId\": { \"type\": \"number\" },",
                  "                                \"description\": { \"type\": \"string\" },",
                  "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                                \"amount\": { \"type\": \"number\" },",
                  "                                \"transactionId\": { \"type\": \"number\" }",
                  "                            },",
                  "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                  "                        }",
                  "                    }",
                  "                },",
                  "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5a75632f-5e4f-4178-9f37-c4f1cd01bcfe",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a0213340-c78b-4c5a-9d99-7036f8613d6b",
          "scriptId": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
          "execution": "68eff305-a44e-4334-8558-dfa726e536d0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "8f16edc89e5c0eff131d1d8de08b0e07",
          "id": "3aeed3a7-be90-4d0e-b7da-6a77c417aabb",
          "timestamp": 1690227516394,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
          "name": "Get Transactions 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"transactionId\": { \"type\": \"number\" },",
                  "                    \"beneficiaryName\": { \"type\": \"string\" },",
                  "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                  "                    \"direction\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"description\": { \"type\": \"string\" },",
                  "                    \"currency\": { \"type\": \"number\" },",
                  "                    \"mcc\": { \"type\": \"number\" },",
                  "                    \"kind\": { \"type\": \"string\" },",
                  "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                    \"splits\": {",
                  "                        \"type\": \"array\",",
                  "                        \"items\": {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"splitId\": { \"type\": \"number\" },",
                  "                                \"description\": { \"type\": \"string\" },",
                  "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                  "                                \"amount\": { \"type\": \"number\" },",
                  "                                \"transactionId\": { \"type\": \"number\" }",
                  "                            },",
                  "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                  "                        }",
                  "                    }",
                  "                },",
                  "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5a75632f-5e4f-4178-9f37-c4f1cd01bcfe",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a0213340-c78b-4c5a-9d99-7036f8613d6b",
          "scriptId": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
          "execution": "68eff305-a44e-4334-8558-dfa726e536d0"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "0b21d169-cc62-428f-85c8-b214c56c3271",
          "timestamp": 1690227516403,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
          "name": "Get Transactions 400",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "key": "startDate",
                  "value": "2022-11-20"
                },
                {
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "32a0cb47-b762-4fae-b6c5-947551e08239",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "204b2838-7e66-41ad-b69b-fdd79ee35911"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "64c7a89f63cc6691a1341676e9b0cf66",
          "id": "cebf156d-4427-40fd-b31b-9050635469b1",
          "timestamp": 1690227516406,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
          "name": "Get Transactions 400",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "key": "startDate",
                  "value": "2022-11-20"
                },
                {
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "32a0cb47-b762-4fae-b6c5-947551e08239",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "204b2838-7e66-41ad-b69b-fdd79ee35911",
          "scriptId": "27d8353a-325b-4e43-9774-a4eea1e37c13",
          "execution": "b96d405f-dc62-46db-852b-87ff61e33ff4"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "0250800a78e1355d35a3d00ac2d988eb",
          "id": "2f3e008b-0bd5-45d0-962b-d6c8f5e61f4c",
          "timestamp": 1690227516407,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
          "name": "Get Transactions 400",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "key": "startDate",
                  "value": "2022-11-20"
                },
                {
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "32a0cb47-b762-4fae-b6c5-947551e08239",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "204b2838-7e66-41ad-b69b-fdd79ee35911",
          "scriptId": "27d8353a-325b-4e43-9774-a4eea1e37c13",
          "execution": "b96d405f-dc62-46db-852b-87ff61e33ff4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "ab4d099b2ea0bcd853faadc551217b4b",
          "id": "5fa78688-483d-4cf3-a486-474680492e60",
          "timestamp": 1690227516407,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
          "name": "Get Transactions 400",
          "request": {
            "url": {
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [
                {
                  "key": "transactionKind",
                  "value": "wdw,pmt"
                },
                {
                  "key": "startDate",
                  "value": "2022-11-20"
                },
                {
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "key": "sortBy",
                  "value": "transactionId"
                },
                {
                  "key": "sortOrder",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "ad4861ea-a2ff-4a13-a4f9-72e1e314ce40",
          "name": "Get Transactions",
          "item": [
            {
              "id": "bdc85a1d-5e0a-4918-bdec-b2db9525af1e",
              "name": "Get Transactions 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dc1a73d-9ebf-4a7c-90b0-47ab42993666",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"transactionId\": { \"type\": \"number\" },",
                      "                    \"beneficiaryName\": { \"type\": \"string\" },",
                      "                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
                      "                    \"direction\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"description\": { \"type\": \"string\" },",
                      "                    \"currency\": { \"type\": \"number\" },",
                      "                    \"mcc\": { \"type\": \"number\" },",
                      "                    \"kind\": { \"type\": \"string\" },",
                      "                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                    \"splits\": {",
                      "                        \"type\": \"array\",",
                      "                        \"items\": {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"splitId\": { \"type\": \"number\" },",
                      "                                \"description\": { \"type\": \"string\" },",
                      "                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
                      "                                \"amount\": { \"type\": \"number\" },",
                      "                                \"transactionId\": { \"type\": \"number\" }",
                      "                            },",
                      "                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "68eff305-a44e-4334-8558-dfa726e536d0"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "bbca8aa7-9fd5-4b08-a9a7-331414955419",
              "name": "Get Transactions 400",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [
                    {
                      "key": "transactionKind",
                      "value": "wdw,pmt"
                    },
                    {
                      "key": "startDate",
                      "value": "2022-11-20"
                    },
                    {
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "key": "sortBy",
                      "value": "transactionId"
                    },
                    {
                      "key": "sortOrder",
                      "value": "asc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27d8353a-325b-4e43-9774-a4eea1e37c13",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b96d405f-dc62-46db-852b-87ff61e33ff4"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "32a0cb47-b762-4fae-b6c5-947551e08239",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "204b2838-7e66-41ad-b69b-fdd79ee35911",
          "scriptId": "27d8353a-325b-4e43-9774-a4eea1e37c13",
          "execution": "b96d405f-dc62-46db-852b-87ff61e33ff4"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "a6c5618b-1ad8-488c-bde0-f2d22477f9d1",
          "timestamp": 1690227516415,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
          "name": "Split Transaction 200",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98bcf16e-f3fa-4b39-871b-ef0ab7e7cb24",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "388fcae5-26b7-487d-874d-cb50468bab5f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "c1dbdb5885c0ef14135ec5af49ec3140",
          "id": "43621a36-17d3-4dbd-9888-ba1c711fa82d",
          "timestamp": 1690227516419,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
          "name": "Split Transaction 200",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98bcf16e-f3fa-4b39-871b-ef0ab7e7cb24",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "388fcae5-26b7-487d-874d-cb50468bab5f",
          "scriptId": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
          "execution": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "f0d1d650bebf11482d6c0764a29f215d",
          "id": "b6c52893-bec1-4dba-b115-efedcaec1567",
          "timestamp": 1690227516419,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
          "name": "Split Transaction 200",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98bcf16e-f3fa-4b39-871b-ef0ab7e7cb24",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "388fcae5-26b7-487d-874d-cb50468bab5f",
          "scriptId": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
          "execution": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "9fd67df9fd7b1d2c035670215a4466d7",
          "id": "42868691-4bb4-4be0-9aca-50c549ad8385",
          "timestamp": 1690227516419,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
          "name": "Split Transaction 200",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "98bcf16e-f3fa-4b39-871b-ef0ab7e7cb24",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "388fcae5-26b7-487d-874d-cb50468bab5f",
          "scriptId": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
          "execution": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "e112649a-9a78-4475-83ac-db82bc13a342",
          "timestamp": 1690227516428,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
          "name": "Split Transaction 400",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a13c6c37-aab6-4d80-9505-d2668a9b6934",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd213ce9-6df5-4463-97ee-a803ab400ba2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "2093c66eb15522ada29fc638eb78a45b",
          "id": "adf26171-4920-4ff6-8f7a-9437871189d6",
          "timestamp": 1690227516431,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
          "name": "Split Transaction 400",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a13c6c37-aab6-4d80-9505-d2668a9b6934",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd213ce9-6df5-4463-97ee-a803ab400ba2",
          "scriptId": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
          "execution": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "9d5e7c5f5d8a5605adaa4940ee313cdf",
          "id": "f3fd0508-8dcb-4c90-99e5-46e55037d435",
          "timestamp": 1690227516431,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
          "name": "Split Transaction 400",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a13c6c37-aab6-4d80-9505-d2668a9b6934",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd213ce9-6df5-4463-97ee-a803ab400ba2",
          "scriptId": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
          "execution": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "70e287c009ce5858ac10d18c93ce4efc",
          "id": "06e00fc0-7428-439d-b80b-6588bf03531f",
          "timestamp": 1690227516431,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
          "name": "Split Transaction 400",
          "request": {
            "url": {
              "path": [
                "10058284",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a13c6c37-aab6-4d80-9505-d2668a9b6934",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd213ce9-6df5-4463-97ee-a803ab400ba2",
          "scriptId": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
          "execution": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "6cbbcf24-56a1-4bb6-9055-781b045df79d",
          "timestamp": 1690227516439,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
          "name": "Split Transaction 404",
          "request": {
            "url": {
              "path": [
                "10058285",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72fe8739-eb5f-4ca9-acaa-2606b580ed96",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "074b6e04-bf39-4c06-ad8a-251fc0ef915f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "c4cf17393b8d9cd58132e2b52e173dd0",
          "id": "af922a1e-a3f3-4c39-acf7-c3d3747ae228",
          "timestamp": 1690227516442,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
          "name": "Split Transaction 404",
          "request": {
            "url": {
              "path": [
                "10058285",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72fe8739-eb5f-4ca9-acaa-2606b580ed96",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "074b6e04-bf39-4c06-ad8a-251fc0ef915f",
          "scriptId": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
          "execution": "64e72914-0210-4ebd-b542-dc70bb0d783a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "e9592904314bdf4e53a405e4a1bb6cf1",
          "id": "a16406e5-6c0c-4fd9-babe-b7ab0b3a3ad6",
          "timestamp": 1690227516442,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
          "name": "Split Transaction 404",
          "request": {
            "url": {
              "path": [
                "10058285",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72fe8739-eb5f-4ca9-acaa-2606b580ed96",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "074b6e04-bf39-4c06-ad8a-251fc0ef915f",
          "scriptId": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
          "execution": "64e72914-0210-4ebd-b542-dc70bb0d783a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:7)",
          "checksum": "c8572069b5c7a79f01050f49680319fb",
          "id": "76a7e369-8f8f-4a82-b3e4-0a9459a379a4",
          "timestamp": 1690227516442,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
          "name": "Split Transaction 404",
          "request": {
            "url": {
              "path": [
                "10058285",
                "split"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"string\"},",
                  "        \"message\": { \"type\": \"string\"},",
                  "        \"errors\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"tag\": { \"type\": \"string\" },",
                  "                    \"error\": { \"type\": \"string\" },",
                  "                    \"message\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"tag\", \"error\", \"message\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
              }
            }
          ]
        },
        "parent": {
          "id": "0ab88eb6-39f3-46c6-b96f-a115f57c8920",
          "name": "Split Transaction",
          "item": [
            {
              "id": "94d4d82b-dd56-46da-82ac-e97816703a56",
              "name": "Split Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5673ae98-dce3-4301-b03d-fd6c977b1c41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "8fb49fdd-28e0-4c54-aeea-af1edf0c2451"
                  }
                }
              ]
            },
            {
              "id": "d25a6643-1737-43be-9ccb-b8791fd33087",
              "name": "Split Transaction 400",
              "request": {
                "url": {
                  "path": [
                    "10058284",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf62ff6c-248e-4262-a446-f2f53d31aa14",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "b202b6a9-2620-465b-b39f-3944b42a8aeb"
                  }
                }
              ]
            },
            {
              "id": "3bc1a442-9981-47a1-b0f5-17e8c9e465f1",
              "name": "Split Transaction 404",
              "request": {
                "url": {
                  "path": [
                    "10058285",
                    "split"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"string\"},",
                      "        \"message\": { \"type\": \"string\"},",
                      "        \"errors\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"tag\": { \"type\": \"string\" },",
                      "                    \"error\": { \"type\": \"string\" },",
                      "                    \"message\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"tag\", \"error\", \"message\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "64e72914-0210-4ebd-b542-dc70bb0d783a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "72fe8739-eb5f-4ca9-acaa-2606b580ed96",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "074b6e04-bf39-4c06-ad8a-251fc0ef915f",
          "scriptId": "dbe5affa-5a8a-4dd7-af8e-f33f17149d3f",
          "execution": "64e72914-0210-4ebd-b542-dc70bb0d783a"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "8b27d798-ec57-4b65-9db6-c3f2f339271e",
          "timestamp": 1690227516451,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
          "name": "Auto-Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "auto-categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
              }
            }
          ]
        },
        "parent": {
          "id": "f3f0da63-2e40-46be-ad87-13803894edad",
          "name": "Auto-Categorize Transactions",
          "item": [
            {
              "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
              "name": "Auto-Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "auto-categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71fb6de6-fc2c-4369-89e5-2f433f73693e",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53105633-7231-4bd1-9a8b-d0f0193d1194"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "3eaa2c70e8edc9263be3e00bf722f3c2",
          "id": "61c5df8e-c9b2-41d6-b978-e27f181a7826",
          "timestamp": 1690227516454,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
          "name": "Auto-Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "auto-categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
              }
            }
          ]
        },
        "parent": {
          "id": "f3f0da63-2e40-46be-ad87-13803894edad",
          "name": "Auto-Categorize Transactions",
          "item": [
            {
              "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
              "name": "Auto-Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "auto-categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71fb6de6-fc2c-4369-89e5-2f433f73693e",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53105633-7231-4bd1-9a8b-d0f0193d1194",
          "scriptId": "ed29609b-4794-45b2-bc70-e7485466e4d5",
          "execution": "12cf7c07-e86a-4066-be81-f90c65d3389d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "afca66e4a89174300da896b2b683648f",
          "id": "26acb5f3-6940-4b20-90f5-53f28ad1e5d5",
          "timestamp": 1690227516454,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
          "name": "Auto-Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "auto-categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
              }
            }
          ]
        },
        "parent": {
          "id": "f3f0da63-2e40-46be-ad87-13803894edad",
          "name": "Auto-Categorize Transactions",
          "item": [
            {
              "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
              "name": "Auto-Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "auto-categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71fb6de6-fc2c-4369-89e5-2f433f73693e",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53105633-7231-4bd1-9a8b-d0f0193d1194",
          "scriptId": "ed29609b-4794-45b2-bc70-e7485466e4d5",
          "execution": "12cf7c07-e86a-4066-be81-f90c65d3389d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "647b4d6607c12085c26d05ce4969b406",
          "id": "d7a147fd-b018-4cd0-9282-e89744d0f697",
          "timestamp": 1690227516454,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
          "name": "Auto-Categorize Transaction 200",
          "request": {
            "url": {
              "path": [
                "auto-categorize"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
              }
            }
          ]
        },
        "parent": {
          "id": "f3f0da63-2e40-46be-ad87-13803894edad",
          "name": "Auto-Categorize Transactions",
          "item": [
            {
              "id": "3baf7475-edbb-4e7d-ae8e-00dd8706b440",
              "name": "Auto-Categorize Transaction 200",
              "request": {
                "url": {
                  "path": [
                    "auto-categorize"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed29609b-4794-45b2-bc70-e7485466e4d5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "12cf7c07-e86a-4066-be81-f90c65d3389d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71fb6de6-fc2c-4369-89e5-2f433f73693e",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "53105633-7231-4bd1-9a8b-d0f0193d1194",
          "scriptId": "ed29609b-4794-45b2-bc70-e7485466e4d5",
          "execution": "12cf7c07-e86a-4066-be81-f90c65d3389d"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "d2840aeb-24e9-4796-adf5-b07272911314",
          "timestamp": 1690227516466,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cfc3a2bf-804a-4500-916d-404788a3a868",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e68f1949-c532-41ce-a147-97cd1b4a5363"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "87b46cbf578be4cde33cf937ea8fd482",
          "id": "15e9b51c-d676-4754-8361-fc46dbacd336",
          "timestamp": 1690227516469,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cfc3a2bf-804a-4500-916d-404788a3a868",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e68f1949-c532-41ce-a147-97cd1b4a5363",
          "scriptId": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
          "execution": "6d415c70-d025-4cba-bd93-3269f586a6a2"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "de5631e49c129141c686b7ae42151503",
          "id": "1d0b163c-4b0d-4a29-9d6c-35c2c0ee8b42",
          "timestamp": 1690227516469,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cfc3a2bf-804a-4500-916d-404788a3a868",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e68f1949-c532-41ce-a147-97cd1b4a5363",
          "scriptId": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
          "execution": "6d415c70-d025-4cba-bd93-3269f586a6a2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:9)",
          "checksum": "f4efaa572ead6ae606cd3b33a93f9a68",
          "id": "4cc405ba-c8c3-4b09-8e86-557ea52e8c29",
          "timestamp": 1690227516469,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cfc3a2bf-804a-4500-916d-404788a3a868",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e68f1949-c532-41ce-a147-97cd1b4a5363",
          "scriptId": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
          "execution": "6d415c70-d025-4cba-bd93-3269f586a6a2"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "e0cc8a77-8cb9-4853-ae77-051a0f77c515",
          "timestamp": 1690227516477,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ab2359f4-e431-444a-9240-fa0370050819",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2611dbd-aac3-4eb8-8e1a-5eb39f0d5eb8",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "004f8f1f-8082-428a-8fda-82bda4474432"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "be29ade148ec3b07f1c0fd216e439338",
          "id": "3f3d3991-18f7-491b-b7af-8c7374d3db84",
          "timestamp": 1690227516480,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ab2359f4-e431-444a-9240-fa0370050819",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2611dbd-aac3-4eb8-8e1a-5eb39f0d5eb8",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "004f8f1f-8082-428a-8fda-82bda4474432",
          "scriptId": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
          "execution": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "9e440abb0baab2e68f03c460e3d4b8f7",
          "id": "bde7e3b9-c2b0-4ccc-8c8b-65c4c018a718",
          "timestamp": 1690227516481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ab2359f4-e431-444a-9240-fa0370050819",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2611dbd-aac3-4eb8-8e1a-5eb39f0d5eb8",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "004f8f1f-8082-428a-8fda-82bda4474432",
          "scriptId": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
          "execution": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:10)",
          "checksum": "232608857b542afad6d05322453dcece",
          "id": "9aa3423d-6e49-4834-b20c-2142b25af54e",
          "timestamp": 1690227516481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ab2359f4-e431-444a-9240-fa0370050819",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{transactionsUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
              }
            }
          ]
        },
        "parent": {
          "id": "a72dc2bd-c4a0-4b56-ad95-b37e3000c6df",
          "name": "Import File",
          "item": [
            {
              "id": "f2de2b0b-bcbf-4396-b3cc-ac4fc3f70528",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ebb15be-175a-4a5d-b37b-13c908ec44eb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "6d415c70-d025-4cba-bd93-3269f586a6a2"
                  }
                }
              ]
            },
            {
              "id": "ab2359f4-e431-444a-9240-fa0370050819",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{transactionsUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d2611dbd-aac3-4eb8-8e1a-5eb39f0d5eb8",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "004f8f1f-8082-428a-8fda-82bda4474432",
          "scriptId": "d82f9eef-e057-4ec3-9a5c-30160b4cba5a",
          "execution": "96914ed0-499a-4f71-afe1-a9a22b32f4f0"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "3b017e4a-874e-4311-808a-0c429b6ed544",
          "timestamp": 1690227516489,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
          "name": "Get Categories 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [
                {
                  "key": "parentCode",
                  "value": "B"
                },
                {
                  "key": "sortBy",
                  "value": "parentCode"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"codeId\": { \"type\": \"string\" },",
                  "                    \"parentCode\": { \"type\": \"string\" },",
                  "                    \"name\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "3afccb31-c0c2-4224-abbb-2e1cbb93d6ab",
          "name": "Get Categories",
          "item": [
            {
              "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
              "name": "Get Categories 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [
                    {
                      "key": "parentCode",
                      "value": "B"
                    },
                    {
                      "key": "sortBy",
                      "value": "parentCode"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"codeId\": { \"type\": \"string\" },",
                      "                    \"parentCode\": { \"type\": \"string\" },",
                      "                    \"name\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03dd078c-dd94-463b-a4d4-454c8545dd1a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e8efbf-46f8-4298-8e7f-ea674da02847"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "40d9d5fa52c6fafa6877e6836aa717dc",
          "id": "1e161865-b198-47d1-a709-eebe546fd662",
          "timestamp": 1690227516492,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
          "name": "Get Categories 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [
                {
                  "key": "parentCode",
                  "value": "B"
                },
                {
                  "key": "sortBy",
                  "value": "parentCode"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"codeId\": { \"type\": \"string\" },",
                  "                    \"parentCode\": { \"type\": \"string\" },",
                  "                    \"name\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "3afccb31-c0c2-4224-abbb-2e1cbb93d6ab",
          "name": "Get Categories",
          "item": [
            {
              "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
              "name": "Get Categories 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [
                    {
                      "key": "parentCode",
                      "value": "B"
                    },
                    {
                      "key": "sortBy",
                      "value": "parentCode"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"codeId\": { \"type\": \"string\" },",
                      "                    \"parentCode\": { \"type\": \"string\" },",
                      "                    \"name\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03dd078c-dd94-463b-a4d4-454c8545dd1a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e8efbf-46f8-4298-8e7f-ea674da02847",
          "scriptId": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
          "execution": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "b9854e66f79b37a813a78433b178ec96",
          "id": "e9a5b7a7-f287-4b7a-8dd8-93a1a02db573",
          "timestamp": 1690227516493,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
          "name": "Get Categories 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [
                {
                  "key": "parentCode",
                  "value": "B"
                },
                {
                  "key": "sortBy",
                  "value": "parentCode"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"codeId\": { \"type\": \"string\" },",
                  "                    \"parentCode\": { \"type\": \"string\" },",
                  "                    \"name\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "3afccb31-c0c2-4224-abbb-2e1cbb93d6ab",
          "name": "Get Categories",
          "item": [
            {
              "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
              "name": "Get Categories 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [
                    {
                      "key": "parentCode",
                      "value": "B"
                    },
                    {
                      "key": "sortBy",
                      "value": "parentCode"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"codeId\": { \"type\": \"string\" },",
                      "                    \"parentCode\": { \"type\": \"string\" },",
                      "                    \"name\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03dd078c-dd94-463b-a4d4-454c8545dd1a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e8efbf-46f8-4298-8e7f-ea674da02847",
          "scriptId": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
          "execution": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:11)",
          "checksum": "434fe7bf0d169482d1cfaf03942b2572",
          "id": "44506a17-f9b2-42f4-a8a0-8aee07bed9f7",
          "timestamp": 1690227516493,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
          "name": "Get Categories 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [
                {
                  "key": "parentCode",
                  "value": "B"
                },
                {
                  "key": "sortBy",
                  "value": "parentCode"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"totalCount\": { \"type\": \"number\" },",
                  "        \"pageSize\": { \"type\": \"number\" },",
                  "        \"page\": { \"type\": \"number\" },",
                  "        \"totalPages\": { \"type\": \"number\" },",
                  "        \"sortOrder\": { \"type\": \"number\" },",
                  "        \"sortBy\": { \"type\": \"string\" },",
                  "        \"items\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"codeId\": { \"type\": \"string\" },",
                  "                    \"parentCode\": { \"type\": \"string\" },",
                  "                    \"name\": { \"type\": \"string\" }",
                  "                },",
                  "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "3afccb31-c0c2-4224-abbb-2e1cbb93d6ab",
          "name": "Get Categories",
          "item": [
            {
              "id": "1969a7b2-c8fb-4830-b36f-663c7162e37a",
              "name": "Get Categories 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [
                    {
                      "key": "parentCode",
                      "value": "B"
                    },
                    {
                      "key": "sortBy",
                      "value": "parentCode"
                    },
                    {
                      "key": "sortOrder",
                      "value": "desc"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "pageSize",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"totalCount\": { \"type\": \"number\" },",
                      "        \"pageSize\": { \"type\": \"number\" },",
                      "        \"page\": { \"type\": \"number\" },",
                      "        \"totalPages\": { \"type\": \"number\" },",
                      "        \"sortOrder\": { \"type\": \"number\" },",
                      "        \"sortBy\": { \"type\": \"string\" },",
                      "        \"items\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"codeId\": { \"type\": \"string\" },",
                      "                    \"parentCode\": { \"type\": \"string\" },",
                      "                    \"name\": { \"type\": \"string\" }",
                      "                },",
                      "                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03dd078c-dd94-463b-a4d4-454c8545dd1a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64e8efbf-46f8-4298-8e7f-ea674da02847",
          "scriptId": "11c7b223-4612-4809-95a7-c31fcd69ab1e",
          "execution": "0b287626-32f8-45ae-bdd3-7cc2e0601c79"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "e9ed51af-543d-425f-a8f5-a4f54bdc0bc6",
          "timestamp": 1690227516501,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad7fbf50-4a03-4973-81cd-d7e302102aeb",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c673e4f4-2aa8-4aff-8838-4604ce973a4d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "f9d46260387be0f97ade9c2ac66f3dc1",
          "id": "495d662b-89a4-4a74-b98c-9f6df6e64da2",
          "timestamp": 1690227516505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad7fbf50-4a03-4973-81cd-d7e302102aeb",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c673e4f4-2aa8-4aff-8838-4604ce973a4d",
          "scriptId": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
          "execution": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "0af94b847682aae50d04783c5f5eaabc",
          "id": "3b18e17f-ee13-476e-bbdd-0c281a8d0dd3",
          "timestamp": 1690227516505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad7fbf50-4a03-4973-81cd-d7e302102aeb",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c673e4f4-2aa8-4aff-8838-4604ce973a4d",
          "scriptId": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
          "execution": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:12)",
          "checksum": "f0ebffeb56be18733e58e6128c260383",
          "id": "b0328163-4213-40f7-a0ac-f2e407e052b2",
          "timestamp": 1690227516505,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
          "name": "Import File 200",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ad7fbf50-4a03-4973-81cd-d7e302102aeb",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c673e4f4-2aa8-4aff-8838-4604ce973a4d",
          "scriptId": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
          "execution": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "09397f22-cf76-49e4-81e7-e13a21de6cc7",
          "timestamp": 1690227516513,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8bd3221-439f-4b01-a43e-b54cfd0eb97b",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeafa191-7934-4c55-a564-6972d3010210"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 400",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "79eab4cdb2586d2ffafa59e4cda97d7c",
          "id": "9281b707-9db0-4c15-9e98-a97202a40019",
          "timestamp": 1690227516516,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8bd3221-439f-4b01-a43e-b54cfd0eb97b",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeafa191-7934-4c55-a564-6972d3010210",
          "scriptId": "72895d40-af13-4fd1-9724-55c45e0d2820",
          "execution": "a974b2fc-9228-4175-a1ff-8de3e4693319"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "e9bc265059b03f7f849eea41cabf69f2",
          "id": "8e835316-1221-4bf1-908a-8d9d6bff21f1",
          "timestamp": 1690227516516,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8bd3221-439f-4b01-a43e-b54cfd0eb97b",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeafa191-7934-4c55-a564-6972d3010210",
          "scriptId": "72895d40-af13-4fd1-9724-55c45e0d2820",
          "execution": "a974b2fc-9228-4175-a1ff-8de3e4693319"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:13)",
          "checksum": "b407cb7de2eddc18d8dccda1bf4d2fc5",
          "id": "0506bd87-e335-4889-8edd-4408500292d8",
          "timestamp": 1690227516516,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
          "name": "Import File 400",
          "request": {
            "url": {
              "path": [
                "import"
              ],
              "host": [
                "{{server}}{{categoriesUri}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": true,
                "key": "",
                "value": ""
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"statusCode\": { \"type\": \"number\" },",
                  "        \"message\": { \"type\": \"string\" },",
                  "        \"errors\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"formFile\": {",
                  "                    \"type\": \"array\",",
                  "                    \"items\": {",
                  "                        \"type\": \"string\"",
                  "                    }",
                  "                }",
                  "            },",
                  "            \"required\": [\"formFile\"]",
                  "        }",
                  "    },",
                  "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
              }
            }
          ]
        },
        "parent": {
          "id": "31008d48-f429-4bf8-bee1-60f5da86964f",
          "name": "Import File",
          "item": [
            {
              "id": "2441cacd-3773-4db7-8a6d-f623361440d1",
              "name": "Import File 200",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8933e156-fe3d-4a4b-8f9c-f51fabd6b7de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "37f6181a-a375-4e7f-9aa0-0b609de32c19"
                  }
                }
              ]
            },
            {
              "id": "40eaa2bb-8b6b-42e4-936c-eec1ecd888c8",
              "name": "Import File 400",
              "request": {
                "url": {
                  "path": [
                    "import"
                  ],
                  "host": [
                    "{{server}}{{categoriesUri}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": true,
                    "key": "",
                    "value": ""
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72895d40-af13-4fd1-9724-55c45e0d2820",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"statusCode\": { \"type\": \"number\" },",
                      "        \"message\": { \"type\": \"string\" },",
                      "        \"errors\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"formFile\": {",
                      "                    \"type\": \"array\",",
                      "                    \"items\": {",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                }",
                      "            },",
                      "            \"required\": [\"formFile\"]",
                      "        }",
                      "    },",
                      "    \"required\": [\"statusCode\", \"message\", \"errors\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});"
                    ],
                    "_lastExecutionId": "a974b2fc-9228-4175-a1ff-8de3e4693319"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d8bd3221-439f-4b01-a43e-b54cfd0eb97b",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeafa191-7934-4c55-a564-6972d3010210",
          "scriptId": "72895d40-af13-4fd1-9724-55c45e0d2820",
          "execution": "a974b2fc-9228-4175-a1ff-8de3e4693319"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "892acbbb-6f97-4629-8c47-c4bfe2620eab",
          "timestamp": 1690227516524,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
          "name": "Get Spending Analytics 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "C,4"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"groups\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"catcode\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"count\": { \"type\": \"number\" }",
                  "                },",
                  "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"groups\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d4b2748-4e95-437a-91d7-54aac3c70403",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3952af23-82a2-46b3-aa9c-1c8c619438ea"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "2a70204027998072afa1b1f0164ad4e0",
          "id": "ba8695a7-b709-4639-b2ef-d4f61d3e83dd",
          "timestamp": 1690227516527,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
          "name": "Get Spending Analytics 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "C,4"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"groups\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"catcode\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"count\": { \"type\": \"number\" }",
                  "                },",
                  "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"groups\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d4b2748-4e95-437a-91d7-54aac3c70403",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3952af23-82a2-46b3-aa9c-1c8c619438ea",
          "scriptId": "9ea8d268-0074-49ec-92bb-dbc562196d58",
          "execution": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "eb024fb19dfa34b5972e0d1458712396",
          "id": "3e6bbce6-0df3-4ab7-85df-c15d99f9b0f3",
          "timestamp": 1690227516527,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
          "name": "Get Spending Analytics 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "C,4"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"groups\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"catcode\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"count\": { \"type\": \"number\" }",
                  "                },",
                  "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"groups\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d4b2748-4e95-437a-91d7-54aac3c70403",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3952af23-82a2-46b3-aa9c-1c8c619438ea",
          "scriptId": "9ea8d268-0074-49ec-92bb-dbc562196d58",
          "execution": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:14)",
          "checksum": "9fbcd6ca03570156fe0191cd945de101",
          "id": "cce8ca34-1879-40e5-ae5b-29e64a6783d1",
          "timestamp": 1690227516528,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
          "name": "Get Spending Analytics 200",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "C,4"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"groups\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"catcode\": { \"type\": \"string\" },",
                  "                    \"amount\": { \"type\": \"number\" },",
                  "                    \"count\": { \"type\": \"number\" }",
                  "                },",
                  "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"groups\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2d4b2748-4e95-437a-91d7-54aac3c70403",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3952af23-82a2-46b3-aa9c-1c8c619438ea",
          "scriptId": "9ea8d268-0074-49ec-92bb-dbc562196d58",
          "execution": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
        }
      },
      {
        "error": {
          "code": "ERR_INVALID_IP_ADDRESS",
          "name": "TypeError",
          "message": "Invalid IP address: undefined",
          "stack": "TypeError [ERR_INVALID_IP_ADDRESS]: Invalid IP address: undefined\n    at new NodeError (node:internal/errors:405:5)\n    at emitLookup (node:net:1432:17)\n    at /opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:303:31\n    at Socket.done (/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js:254:21)\n    at Object.onceWrapper (node:events:626:26)\n    at Socket.emit (node:events:511:28)\n    at emitErrorNT (node:internal/streams/destroy:151:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
          "checksum": "96b3ea96d94ffcb193af55f210836ebc",
          "id": "74bac415-a213-4e84-a605-ed2a22e51389",
          "timestamp": 1690227516536,
          "stacktrace": [
            {
              "fileName": "node:internal/errors",
              "lineNumber": 405,
              "functionName": "new NodeError",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 5,
              "native": false
            },
            {
              "fileName": "node:net",
              "lineNumber": 1432,
              "functionName": "emitLookup",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 17,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 303,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 31,
              "native": false
            },
            {
              "fileName": "/opt/homebrew/lib/node_modules/newman/node_modules/postman-runtime/lib/requester/core.js",
              "lineNumber": 254,
              "functionName": "Socket.done",
              "typeName": "Socket",
              "methodName": "done",
              "columnNumber": 21,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 626,
              "functionName": "Object.onceWrapper",
              "typeName": "Object",
              "methodName": "onceWrapper",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "node:events",
              "lineNumber": 511,
              "functionName": "Socket.emit",
              "typeName": "Socket",
              "methodName": "emit",
              "columnNumber": 28,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 151,
              "functionName": "emitErrorNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 8,
              "native": false
            },
            {
              "fileName": "node:internal/streams/destroy",
              "lineNumber": 116,
              "functionName": "emitErrorCloseNT",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 3,
              "native": false
            },
            {
              "fileName": "node:internal/process/task_queues",
              "lineNumber": 82,
              "functionName": "process.processTicksAndRejections",
              "typeName": "process",
              "methodName": "processTicksAndRejections",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
          "name": "Get Spending Analytics 404",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "A"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "113ba4e0-6460-418b-92c6-b1f76cd3331f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "093f9af6-51e2-4336-89fc-e5c8c93c8457"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "f18e48dbe1b0a9cd3a6abc7344ca39cb",
          "id": "02585ccb-6885-499e-8bf8-8f66f326bf1a",
          "timestamp": 1690227516539,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
          "name": "Get Spending Analytics 404",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "A"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "113ba4e0-6460-418b-92c6-b1f76cd3331f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "093f9af6-51e2-4336-89fc-e5c8c93c8457",
          "scriptId": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
          "execution": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response has correct schema",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "737c41a0664ccbf834aad75ed966d992",
          "id": "1c1f5ab6-458b-45ab-8e46-09733b56fcac",
          "timestamp": 1690227516539,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
          "name": "Get Spending Analytics 404",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "A"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "113ba4e0-6460-418b-92c6-b1f76cd3331f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "093f9af6-51e2-4336-89fc-e5c8c93c8457",
          "scriptId": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
          "execution": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response time is less than 500ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:3:15)",
          "checksum": "39edb9d222ca2dd29db2627a4338c172",
          "id": "7780ced0-fb84-43b3-9e2e-a5b279beba83",
          "timestamp": 1690227516539,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
          "name": "Get Spending Analytics 404",
          "request": {
            "url": {
              "host": [
                "{{server}}{{spendingAnalyticsUri}}"
              ],
              "query": [
                {
                  "key": "catcode",
                  "value": "A"
                },
                {
                  "disabled": true,
                  "key": "startDate",
                  "value": "2021-11-20"
                },
                {
                  "disabled": true,
                  "key": "endDate",
                  "value": "2021-11-21"
                },
                {
                  "disabled": true,
                  "key": "direction",
                  "value": "d"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "disabled": true,
                  "key": "formFile",
                  "type": "file",
                  "src": []
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "const expectedSchema = {",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"message\": { \"type\": \"string\" }",
                  "    },",
                  "    \"required\": [\"message\"]",
                  "};",
                  "",
                  "pm.test(\"Response has correct schema\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ],
                "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "13d2f5d8-8eb4-4bfb-8383-5755638088d1",
          "name": "Get Spending Analytics",
          "item": [
            {
              "id": "a3e68eb5-fce5-4c44-929d-0a8de0255c73",
              "name": "Get Spending Analytics 200",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "C,4"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9ea8d268-0074-49ec-92bb-dbc562196d58",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"groups\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"catcode\": { \"type\": \"string\" },",
                      "                    \"amount\": { \"type\": \"number\" },",
                      "                    \"count\": { \"type\": \"number\" }",
                      "                },",
                      "                \"required\": [\"catcode\", \"amount\", \"count\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"groups\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "e6eb136e-6ee1-4b25-9837-042d6d92aa88"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "34987737-d2f4-41c4-b0ed-e0e3a1bdad41",
              "name": "Get Spending Analytics 404",
              "request": {
                "url": {
                  "host": [
                    "{{server}}{{spendingAnalyticsUri}}"
                  ],
                  "query": [
                    {
                      "key": "catcode",
                      "value": "A"
                    },
                    {
                      "disabled": true,
                      "key": "startDate",
                      "value": "2021-11-20"
                    },
                    {
                      "disabled": true,
                      "key": "endDate",
                      "value": "2021-11-21"
                    },
                    {
                      "disabled": true,
                      "key": "direction",
                      "value": "d"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "disabled": true,
                      "key": "formFile",
                      "type": "file",
                      "src": []
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const expectedSchema = {",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"message\": { \"type\": \"string\" }",
                      "    },",
                      "    \"required\": [\"message\"]",
                      "};",
                      "",
                      "pm.test(\"Response has correct schema\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 500ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);",
                      "});"
                    ],
                    "_lastExecutionId": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "113ba4e0-6460-418b-92c6-b1f76cd3331f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "093f9af6-51e2-4336-89fc-e5c8c93c8457",
          "scriptId": "4decab52-b1d9-42f4-90da-b1381e6cbf70",
          "execution": "0bfe0cd0-24b9-4ac4-b97a-a3b85daa6694"
        }
      }
    ],
    "error": null
  }
}