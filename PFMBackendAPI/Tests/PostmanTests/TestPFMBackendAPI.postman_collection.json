{
	"info": {
		"_postman_id": "1a24bff7-0299-48f9-a76c-d834c12fad82",
		"name": "TestPFMBackendAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13341761"
	},
	"item": [
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Categorize Transaction",
					"item": [
						{
							"name": "Categorize Transaction 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"catcode\": \"4\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/10023191/categorize",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"10023191",
										"categorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "Categorize Transaction 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"catcode\": \"4555\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/10023191/categorize",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"10023191",
										"categorize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Transactions",
					"item": [
						{
							"name": "Get Transactions 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"totalCount\": { \"type\": \"number\" },",
											"        \"pageSize\": { \"type\": \"number\" },",
											"        \"page\": { \"type\": \"number\" },",
											"        \"totalPages\": { \"type\": \"number\" },",
											"        \"sortOrder\": { \"type\": \"number\" },",
											"        \"sortBy\": { \"type\": \"string\" },",
											"        \"items\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"transactionId\": { \"type\": \"number\" },",
											"                    \"beneficiaryName\": { \"type\": \"string\" },",
											"                    \"date\": { \"type\": \"string\", \"format\": \"date-time\" },",
											"                    \"direction\": { \"type\": \"string\" },",
											"                    \"amount\": { \"type\": \"number\" },",
											"                    \"description\": { \"type\": \"string\" },",
											"                    \"currency\": { \"type\": \"number\" },",
											"                    \"mcc\": { \"type\": \"number\" },",
											"                    \"kind\": { \"type\": \"string\" },",
											"                    \"catCode\": { \"type\": [\"string\", \"null\"] },",
											"                    \"splits\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"splitId\": { \"type\": \"number\" },",
											"                                \"description\": { \"type\": \"string\" },",
											"                                \"catCode\": { \"type\": [\"string\", \"null\"] },",
											"                                \"amount\": { \"type\": \"number\" },",
											"                                \"transactionId\": { \"type\": \"number\" }",
											"                            },",
											"                            \"required\": [\"splitId\", \"description\", \"catCode\", \"amount\", \"transactionId\"]",
											"                        }",
											"                    }",
											"                },",
											"                \"required\": [\"transactionId\", \"beneficiaryName\", \"date\", \"direction\", \"amount\", \"description\", \"currency\", \"mcc\", \"kind\", \"catCode\", \"splits\"]",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}?transactionKind=wdw,pmt&sortBy=transactionId&sortOrder=asc&page=1&pageSize=10",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"query": [
										{
											"key": "transactionKind",
											"value": "wdw,pmt"
										},
										{
											"key": "startDate",
											"value": "2021-11-20",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-11-21",
											"disabled": true
										},
										{
											"key": "sortBy",
											"value": "transactionId"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Transactions 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}?transactionKind=wdw,pmt&startDate=2022-11-20&endDate=2021-11-21&sortBy=transactionId&sortOrder=asc&page=1&pageSize=10",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"query": [
										{
											"key": "transactionKind",
											"value": "wdw,pmt"
										},
										{
											"key": "startDate",
											"value": "2022-11-20"
										},
										{
											"key": "endDate",
											"value": "2021-11-21"
										},
										{
											"key": "sortBy",
											"value": "transactionId"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Split Transaction",
					"item": [
						{
							"name": "Split Transaction 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"A\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 12.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/10058284/split",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"10058284",
										"split"
									]
								}
							},
							"response": []
						},
						{
							"name": "Split Transaction 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"string\"},",
											"        \"message\": { \"type\": \"string\"},",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"tag\": { \"type\": \"string\" },",
											"                    \"error\": { \"type\": \"string\" },",
											"                    \"message\": { \"type\": \"string\" }",
											"                },",
											"                \"required\": [\"tag\", \"error\", \"message\"]",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"statusCode\", \"errors\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/10058284/split",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"10058284",
										"split"
									]
								}
							},
							"response": []
						},
						{
							"name": "Split Transaction 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"string\"},",
											"        \"message\": { \"type\": \"string\"},",
											"        \"errors\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"tag\": { \"type\": \"string\" },",
											"                    \"error\": { \"type\": \"string\" },",
											"                    \"message\": { \"type\": \"string\" }",
											"                },",
											"                \"required\": [\"tag\", \"error\", \"message\"]",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"statusCode\", \"errors\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"splits\": [\n    {\n      \"catcode\": \"Ad\",\n      \"amount\": 12,\n      \"description\": \"string\"\n    },\n     {\n      \"catcode\": \"A\",\n      \"amount\": 124.5,\n      \"description\": \"string\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/10058285/split",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"10058285",
										"split"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auto-Categorize Transactions",
					"item": [
						{
							"name": "Auto-Categorize Transaction 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{server}}{{transactionsUri}}/auto-categorize",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"auto-categorize"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Import File",
					"item": [
						{
							"name": "Import File 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv"
										}
									]
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/import",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import File 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"errors\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"formFile\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"required\": [\"formFile\"]",
											"        }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"errors\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/transactions.csv",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{server}}{{transactionsUri}}/import",
									"host": [
										"{{server}}{{transactionsUri}}"
									],
									"path": [
										"import"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get Categories",
					"item": [
						{
							"name": "Get Categories 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"totalCount\": { \"type\": \"number\" },",
											"        \"pageSize\": { \"type\": \"number\" },",
											"        \"page\": { \"type\": \"number\" },",
											"        \"totalPages\": { \"type\": \"number\" },",
											"        \"sortOrder\": { \"type\": \"number\" },",
											"        \"sortBy\": { \"type\": \"string\" },",
											"        \"items\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"codeId\": { \"type\": \"string\" },",
											"                    \"parentCode\": { \"type\": \"string\" },",
											"                    \"name\": { \"type\": \"string\" }",
											"                },",
											"                \"required\": [\"codeId\", \"parentCode\", \"name\"]",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"totalCount\", \"pageSize\", \"page\", \"totalPages\", \"sortOrder\", \"sortBy\", \"items\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{server}}{{categoriesUri}}?parentCode=B&sortBy=parentCode&sortOrder=desc&page=1&pageSize=10",
									"host": [
										"{{server}}{{categoriesUri}}"
									],
									"query": [
										{
											"key": "parentCode",
											"value": "B"
										},
										{
											"key": "sortBy",
											"value": "parentCode"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Import File",
					"item": [
						{
							"name": "Import File 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv"
										}
									]
								},
								"url": {
									"raw": "{{server}}{{categoriesUri}}/import",
									"host": [
										"{{server}}{{categoriesUri}}"
									],
									"path": [
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import File 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"string\" },",
											"        \"errors\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"formFile\": {",
											"                    \"type\": \"array\",",
											"                    \"items\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                }",
											"            },",
											"            \"required\": [\"formFile\"]",
											"        }",
											"    },",
											"    \"required\": [\"statusCode\", \"message\", \"errors\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": "/Users/aleksandranikolovska/Desktop/PFM-ASEE/pfm/PFMBackendAPI/resources/categories.csv",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{server}}{{categoriesUri}}/import",
									"host": [
										"{{server}}{{categoriesUri}}"
									],
									"path": [
										"import"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Spending Analytics",
			"item": [
				{
					"name": "Get Spending Analytics",
					"item": [
						{
							"name": "Get Spending Analytics 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"groups\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"catcode\": { \"type\": \"string\" },",
											"                    \"amount\": { \"type\": \"number\" },",
											"                    \"count\": { \"type\": \"number\" }",
											"                },",
											"                \"required\": [\"catcode\", \"amount\", \"count\"]",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"groups\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{server}}{{spendingAnalyticsUri}}?catcode=C,4",
									"host": [
										"{{server}}{{spendingAnalyticsUri}}"
									],
									"query": [
										{
											"key": "catcode",
											"value": "C,4"
										},
										{
											"key": "startDate",
											"value": "2021-11-20",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-11-21",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "d",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Spending Analytics 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"const expectedSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"message\": { \"type\": \"string\" }",
											"    },",
											"    \"required\": [\"message\"]",
											"};",
											"",
											"pm.test(\"Response has correct schema\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formFile",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{server}}{{spendingAnalyticsUri}}?catcode=A",
									"host": [
										"{{server}}{{spendingAnalyticsUri}}"
									],
									"query": [
										{
											"key": "catcode",
											"value": "A"
										},
										{
											"key": "startDate",
											"value": "2021-11-20",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2021-11-21",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "d",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}